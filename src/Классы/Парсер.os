
Перем _Строка;
Перем _Токенизатор;
Перем _ТекущийТокен;

Процедура ПриСозданииОбъекта()
	_Токенизатор = Новый Токенизатор();
	_Строка = "";
	
КонецПроцедуры

Функция Распарсить(Строка) Экспорт
	_Строка = Строка;
	_Токенизатор.Инит(Строка);

	_ТекущийТокен = _Токенизатор.СледующийТокен();

	Возврат Программа(); 
КонецФункции

Функция Программа()
	Возврат Новый Структура("Тип, Тело", ТипыТокенов.Программа, Литерал());
КонецФункции

Функция Литерал()
	Если _ТекущийТокен.Тип = ТипыТокенов.Число Тогда
		Возврат ЧисловойЛитерал();
	ИначеЕсли _ТекущийТокен.Тип = ТипыТокенов.Строка Тогда
		Возврат СтроковойЛитерал();
	Иначе
		Ошибка("Ожидался литерал, а получен " + _ТекущийТокен.Тип);
	КонецЕсли;
КонецФункции

Функция СтроковойЛитерал()
	Токен = Потребить(ТипыТокенов.Строка);
	Возврат УтилитыПарсера.СтруктураТокена(ТипыТокенов.СтроковыйЛитерал, Токен.Значение);
КонецФункции

Функция ЧисловойЛитерал()
	Токен = Потребить(ТипыТокенов.Число);
	Возврат УтилитыПарсера.СтруктураТокена(ТипыТокенов.ЧисловойЛитерал, Число(Токен.Значение));
КонецФункции

Функция Потребить(ТипТокена)

	Токен = _ТекущийТокен;

	Если Токен.Тип = Неопределено Тогда
		Ошибка("Неожиданный конец ввода " + ТипТокена);
	КонецЕсли;

	Если Токен.Тип <> ТипТокена Тогда
		Ошибка("Ожидался " + ТипТокена + ", а получен " + Токен.Тип);
	КонецЕсли;

	_ТекущийТокен = _Токенизатор.СледующийТокен();

	Возврат Токен;
	
КонецФункции

Процедура Ошибка(ТекстОшибки)
	ВызватьИсключение ТекстОшибки;
КонецПроцедуры
